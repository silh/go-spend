---
openapi: "3.0.3"
info:
  title: 'Go Spend'
  version: "0.1.0"
  description: >
    Provides a way for users and their friends to track their shared expenses.
servers:
  - url: "http://localhost:8080/"
    description: "Local server"
paths:
  /authenticate:
    post:
      description: 'Acquire access and refresh tokens. Refresh functionality is not yet implemented.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        200:
          description: 'Authentication successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
  /balance:
    get:
      security:
        - bearerAuth: [ ]
      description: 'Get information about current user debits and credits in their group'
      responses:
        200:
          description: 'information about current user debits and credits in their group'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
  /expenses:
    post:
      security:
        - bearerAuth: [ ]
      description: 'Create new expense for a user in context'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExpense'
      responses:
        201:
          description: 'Expense was registered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseResponse'
  /groups:
    post:
      security:
        - bearerAuth: [ ]
      description: 'Create a new group with user in context'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        201:
          description: 'Group was created successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
    put:
      security:
        - bearerAuth: [ ]
      description: 'Add user to group. Can only be done by a member of a group'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToGroupRequest'
      responses:
        200:
          description: 'User was added to a group'
  /users:
    post:
      description: 'Create a new user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: 'User was successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AddToGroupRequest:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/id'
        groupId:
          $ref: '#/components/schemas/id'
    AuthenticationRequest:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
    Balance:
      type: object
      additionalProperties:
        type: object
        properties:
          userId:
            $ref: '#/components/schemas/id'
          amount:
            $ref: '#/components/schemas/debitCredit'
    CreateExpense:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        shares:
          $ref: '#/components/schemas/Shares'
    CreateGroupRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/groupName'
    CreateUserRequest:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
    ExpenseResponse:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/id'
        amount:
          $ref: '#/components/schemas/amount'
        timestamp:
          type: string
          format: date-time
          description: 'Time of expense registration'
          example: '2021-01-01T18:17:19.955203+03:00'
        shares:
          $ref: '#/components/schemas/Shares'
    GroupResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/groupName'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
    TokensResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: 'Token used to access private API'
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        refreshToken:
          type: string
          description: 'Token used to refresh access token'
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
    UserResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        email:
          $ref: '#/components/schemas/email'
    Shares:
      type: object
      additionalProperties:
        type: object
        properties:
          userId:
            $ref: '#/components/schemas/id'
          percent:
            $ref: '#/components/schemas/percent'
    amount:
      type: number
      description: 'Expense amount'
      example: 42.0
    debitCredit:
      type: number
      description: 'How much a person owes someone or how much someone owes him depending on a sign'
      example: 42.0
    email:
      type: string
      description: 'Valid email address'
      example: 'user@mail.com'
    groupName:
      type: string
      description: 'Group name'
      example: 'My supergroup'
    id:
      type: integer
      description: 'ID of an object in the system'
      example: 10
    password:
      type: string
      description: 'User password'
      example: '1312143asad!&^'
    percent:
      type: integer
      description: 'How much a percent should have paid of the total amount'
      example: 45

